removeStrategy:
  rbac: SYNC
  items: NONE
items:
- kind: organizationFolder
  name: GHOrg
  displayName: GHOrg
  navigators:
  - github:
      apiUri: https://api.github.com
      traits:
      - gitHubBranchDiscovery:
          strategyId: 1
      - gitHubPullRequestDiscovery:
          strategyId: 2
      - gitHubForkDiscovery:
          trust:
            gitHubTrustPermissions: {}
          strategyId: 2
      repoOwner: org-folderscan-example
      credentialsId: ghorg-app
  orphanedItemStrategy:
    defaultOrphanedItemStrategy:
      pruneDeadBranches: true
      daysToKeep: -1
      numToKeep: -1
      abortBuilds: false
  projectFactories:
  - customMultiBranchProjectFactory:
      factory:
        customBranchProjectFactory:
          marker: pom.xml
          definition:
            cpsFlowDefinition:
              sandbox: true
              script: |
                // Uses Declarative syntax to run commands inside a container.
                pipeline {
                    agent {
                        kubernetes {
                            // Rather than inline YAML, in a multibranch Pipeline you could use: yamlFile 'jenkins-pod.yaml'
                            // Or, to avoid YAML:
                            // containerTemplate {
                            //     name 'shell'
                            //     image 'ubuntu'
                            //     command 'sleep'
                            //     args 'infinity'
                            // }
                            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: shell
                    image: ubuntu
                    command:
                    - sleep
                    args:
                    - infinity
                '''
                            // Can also wrap individual steps:
                            // container('shell') {
                            //     sh 'hostname'
                            // }
                            defaultContainer 'shell'
                        }
                    }
                    stages {
                        stage('Main') {
                            steps {
                                sh 'hostname'
                            }
                        }
                    }
                }
  properties:
  - organizationChildHealthMetricsProperty:
      templates:
      - worstChildHealthMetric:
          recursive: true
      - averageChildHealthMetric: {}
      - jobStatusHealthMetric:
          unstable: true
          countVirginJobs: false
          failure: true
          success: true
          unbuilt: true
      - projectEnabledHealthMetric: {}
  - organizationChildOrphanedItemsProperty:
      strategy:
        inherit: {}
  - organizationChildTriggersProperty:
      templates:
      - periodicFolderTrigger:
          interval: 1d
  - envVars: {}
  - suppressFolderAutomaticTriggering:
      strategy: NONE
      branches: .*
  strategy:
    allBranchesSame: {}
  trigger:
    periodicFolderTrigger:
      interval: 1d
- kind: pipeline
  name: hellworld
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: "\npipeline {\n    agent none\n    stages {\n        stage('Main') {\n\
        \            steps {\n                echo \"Hello world\"\n             \
        \   sleep 5\n            }\n        }\n    }\n}\n        "
  description: ''
  disabled: false
  displayName: hellworld
  properties:
  - buildDiscarder:
      strategy:
        logRotator:
          artifactDaysToKeep: -1
          artifactNumToKeep: -1
          daysToKeep: -1
          numToKeep: 10
  - durabilityHint:
      hint: MAX_SURVIVABILITY
  - rateLimitBuilds:
      throttle:
        throttle:
          count: 32
          userBoost: true
          durationName: second
  resumeBlocked: false
- kind: folder
  name: myfolder
  description: ''
  displayName: myfolder
  properties:
  - envVars: {}
  - itemRestrictions:
      filter: false
- kind: folder
  name: ANDREAS
  description: ''
  displayName: ANDREAS
  properties:
    - envVars: {}
    - itemRestrictions:
        filter: false
- kind: backupAndRestore
  name: restore
  blockBuildWhenDownstreamBuilding: false
  blockBuildWhenUpstreamBuilding: false
  concurrentBuild: false
  disabled: false
  displayName: restore
- kind: pipeline
  name: stressController
  concurrentBuild: true
  definition:
    cpsFlowDefinition:
      sandbox: true
      script: |-
        //To simulate some stress on the controller withgout using sress-ng
        //The Controller requires to have at least 1 executor assigend
        pipeline {
            agent any
            stages {
                stage('Generate Load') {
                    steps {
                        // Start the 'yes' command in the background to generate load.
                        sh '''
                                yes > /dev/null &
                                echo $! > yes.pid
                            '''
                        // stress cpu see https://www.baeldung.com/linux/cpu-spike-bash
                        sh '''
                              dd if=/dev/zero of=/dev/null |
                              dd if=/dev/zero of=/dev/null |
                              dd if=/dev/zero of=/dev/null |
                              dd if=/dev/zero of=/dev/null &
                            '''
                        echo "Tip run now: watch kubectl top pod"
                        // Sleep for a specified duration, e.g., 1 hour.
                        sleep time: 1, unit: 'HOURS'
                        //input id: 'Input', message: 'abort', ok: 'continue'
                        sh '''
                                kill $(cat yes.pid)
                                rm -f yes.pid
                                killall dd
                            '''
                    }
                }
            }
        }
  description: ''
  disabled: false
  displayName: stressController
  resumeBlocked: false
